{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pc\\\\OneDrive\\\\Desktop\\\\careeredge\\\\src\\\\Components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FetchResponse = ({\n  steps,\n  triggerNextStep\n}) => {\n  _s();\n  const [response, setResponse] = useState('Fetching your response...');\n  useEffect(() => {\n    const fetchResponse = async () => {\n      const question = steps['2'].value; // Assuming user entered query in step 2\n\n      // Replace with your Vertex AI model endpoint and API key\n      const vertexAiEndpoint = 'https://asia-south1-aiplatform.googleapis.com';\n      const vertexAiApiKey = 'AIzaSyDxbYzpP8C3VNy-XKnTQhZC2i1koVzulnI';\n\n      // Assuming your model accepts text inputs and returns generated text\n      const prompt = `Answer the user's question in a comprehensive and informative way: ${question}`; // Adjust prompt as needed\n\n      try {\n        const apiResponse = await axios.post(vertexAiEndpoint + ':predict', {\n          instances: [{\n            text: prompt\n          }]\n        }, {\n          headers: {\n            'Authorization': `Bearer ${vertexAiApiKey}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        const generatedText = apiResponse.data.predictions[0].generated_text.trim();\n        setResponse(generatedText);\n      } catch (error) {\n        setResponse('Sorry, I couldn\\'t generate a response at the moment.');\n        console.error('Vertex AI API Error:', error);\n      } finally {\n        triggerNextStep();\n      }\n    };\n    fetchResponse();\n  }, [steps, triggerNextStep]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: response\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(FetchResponse, \"p6VimSnlb45Gq8wQRI86ChAtpEY=\");\n_c = FetchResponse;\nconst steps = [{\n  id: '1',\n  message: 'Hello! What would you like to ask me?',\n  trigger: '2'\n}, {\n  id: '2',\n  user: true,\n  trigger: '3'\n}, {\n  id: '3',\n  component: /*#__PURE__*/_jsxDEV(FetchResponse, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 16\n  }, this),\n  asMessage: true,\n  end: true\n}];\nconst theme = {\n  background: '#A580CA',\n  headerBgColor: '#301934',\n  headerFontSize: '20px',\n  botBubbleColor: '#080121',\n  headerFontColor: 'white',\n  botFontColor: 'white',\n  userBubbleColor: '#080121',\n  userFontColor: 'white'\n};\nconst config = {\n  botAvatar: \"https://t4.ftcdn.net/jpg/04/46/38/69/360_F_446386956_DiOrdcxDFWKWFuzVUCugstxz0zOGMHnA.jpg\",\n  floating: true\n};\nfunction Chatbot() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ChatBot, {\n        headerTitle: \"ChatBot\",\n        steps: steps,\n        ...config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Chatbot;\n;\nexport default _c3 = /*#__PURE__*/React.memo(Chatbot);\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FetchResponse\");\n$RefreshReg$(_c2, \"Chatbot\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","ChatBot","ThemeProvider","axios","jsxDEV","_jsxDEV","FetchResponse","steps","triggerNextStep","_s","response","setResponse","fetchResponse","question","value","vertexAiEndpoint","vertexAiApiKey","prompt","apiResponse","post","instances","text","headers","generatedText","data","predictions","generated_text","trim","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","id","message","trigger","user","component","asMessage","end","theme","background","headerBgColor","headerFontSize","botBubbleColor","headerFontColor","botFontColor","userBubbleColor","userFontColor","config","botAvatar","floating","Chatbot","className","headerTitle","_c2","_c3","memo","$RefreshReg$"],"sources":["C:/Users/Pc/OneDrive/Desktop/careeredge/src/Components/Chatbot.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ChatBot from 'react-simple-chatbot';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nconst FetchResponse = ({ steps, triggerNextStep }) => {\r\n  const [response, setResponse] = useState('Fetching your response...');\r\n\r\n  useEffect(() => {\r\n    const fetchResponse = async () => {\r\n      const question = steps['2'].value; // Assuming user entered query in step 2\r\n\r\n      // Replace with your Vertex AI model endpoint and API key\r\n      const vertexAiEndpoint = 'https://asia-south1-aiplatform.googleapis.com';\r\n      const vertexAiApiKey = 'AIzaSyDxbYzpP8C3VNy-XKnTQhZC2i1koVzulnI';\r\n\r\n      // Assuming your model accepts text inputs and returns generated text\r\n      const prompt = `Answer the user's question in a comprehensive and informative way: ${question}`; // Adjust prompt as needed\r\n\r\n      try {\r\n        const apiResponse = await axios.post(vertexAiEndpoint + ':predict', {\r\n          instances: [{ text: prompt }] \r\n        }, {\r\n          headers: {\r\n            'Authorization': `Bearer ${vertexAiApiKey}`,\r\n            'Content-Type': 'application/json' \r\n          }\r\n        });\r\n\r\n        const generatedText = apiResponse.data.predictions[0].generated_text.trim();\r\n        setResponse(generatedText);\r\n      } catch (error) {\r\n        setResponse('Sorry, I couldn\\'t generate a response at the moment.');\r\n        console.error('Vertex AI API Error:', error); \r\n      } finally {\r\n        triggerNextStep();\r\n      }\r\n    };\r\n    fetchResponse();\r\n  }, [steps, triggerNextStep]);\r\n\r\n  return (\r\n    <div>\r\n      {response}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nconst steps = [\r\n  {\r\n    id: '1',\r\n    message: 'Hello! What would you like to ask me?',\r\n    trigger: '2'\r\n  },\r\n  {\r\n    id: '2',\r\n    user: true,\r\n    trigger: '3' \r\n  },\r\n  {\r\n    id: '3',\r\n    component: <FetchResponse />,\r\n    asMessage: true, \r\n    end: true \r\n  }\r\n];\r\n\r\nconst theme = {\r\n  background: '#A580CA',\r\n  headerBgColor: '#301934',\r\n  headerFontSize: '20px',\r\n  botBubbleColor: '#080121',\r\n  headerFontColor: 'white',\r\n  botFontColor: 'white',\r\n  userBubbleColor: '#080121',\r\n  userFontColor: 'white',\r\n};\r\n\r\nconst config = {\r\n  botAvatar: \"https://t4.ftcdn.net/jpg/04/46/38/69/360_F_446386956_DiOrdcxDFWKWFuzVUCugstxz0zOGMHnA.jpg\",\r\n  floating: true,\r\n};\r\n\r\nfunction Chatbot() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ThemeProvider theme={theme}>\r\n        <ChatBot\r\n          headerTitle=\"ChatBot\"\r\n          steps={steps}\r\n          {...config}\r\n        />\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Chatbot);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}