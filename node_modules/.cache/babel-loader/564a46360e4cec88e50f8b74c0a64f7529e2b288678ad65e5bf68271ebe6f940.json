{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pc\\\\OneDrive\\\\Desktop\\\\careeredge\\\\src\\\\Components\\\\ATS.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { PDFDocument } from 'pdf-lib';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Add Bootstrap CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ATS() {\n  _s();\n  const [jobDescription, setJobDescription] = useState('');\n  const [resumeFile, setResumeFile] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Function to extract text from a PDF file\n  const extractPdfText = async file => {\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n      const pages = pdfDoc.getPages();\n      let text = '';\n      for (const page of pages) {\n        text += await page.getTextContent();\n      }\n      return text;\n    } catch (err) {\n      console.error('Error extracting text from PDF:', err);\n      setError('Failed to extract text from the PDF.');\n      return null;\n    }\n  };\n\n  // Function to get response from Google API\n  const getGeminiResponse = async inputPrompt => {\n    try {\n      const response = await axios.post('https://generativeai.googleapis.com/v1/models/gemini-pro:generateText', {\n        prompt: {\n          text: inputPrompt\n        }\n      }, {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching response from Google API:', err);\n      setError('Failed to get response from the API.');\n      return null;\n    }\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async () => {\n    if (!resumeFile || !jobDescription || !apiKey) {\n      setError('Please upload a resume, enter a job description, and provide an API key.');\n      return;\n    }\n    setError(null);\n    setResponse(null);\n\n    // Extract text from the uploaded resume PDF\n    const resumeText = await extractPdfText(resumeFile);\n    if (!resumeText) {\n      return;\n    }\n\n    // Prepare the input prompt for the Google API\n    const inputPrompt = `\n      Hey Act Like a skilled or very experienced ATS (Application Tracking System)\n      with a deep understanding of the tech field, software engineering, data science, data analyst,\n      and big data engineering. Your task is to evaluate the resume based on the given job description.\n      You must consider the job market is very competitive and you should provide the \n      best assistance for improving the resumes. Assign the percentage Matching based \n      on JD and the missing keywords with high accuracy.\n      resume:${resumeText}\n      description:${jobDescription}\n\n      I want the response in one single string having the structure\n      {\"JD Match\":\"%\",\"MissingKeywords\":[],\"Profile Summary\":\"\"}\n    `;\n\n    // Fetch the response from the Google API\n    const apiResponse = await getGeminiResponse(inputPrompt);\n    if (apiResponse) {\n      setResponse(apiResponse);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4\",\n        children: \"Resume Matcher ATS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"jobDescription\",\n          children: \"Job Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"jobDescription\",\n          value: jobDescription,\n          onChange: e => setJobDescription(e.target.value),\n          placeholder: \"Paste the Job Description here\",\n          rows: \"6\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"resumeFile\",\n          children: \"Upload Your Resume (PDF):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"file\",\n          accept: \"application/pdf\",\n          onChange: e => setResumeFile(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"apiKey\",\n          children: \"Google API Key:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"password\",\n          value: apiKey,\n          onChange: e => setApiKey(e.target.value),\n          placeholder: \"Enter your Google API Key\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary btn-lg\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger mt-4\",\n        role: \"alert\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-center\",\n          children: \"Response:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"bg-light p-3 rounded\",\n          children: JSON.stringify(response, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(ATS, \"schg/+LrZ9KyAN1NfEhju4rW04E=\");\n_c = ATS;\nvar _c;\n$RefreshReg$(_c, \"ATS\");","map":{"version":3,"names":["React","useState","axios","PDFDocument","jsxDEV","_jsxDEV","ATS","_s","jobDescription","setJobDescription","resumeFile","setResumeFile","apiKey","setApiKey","response","setResponse","error","setError","extractPdfText","file","arrayBuffer","pdfDoc","load","pages","getPages","text","page","getTextContent","err","console","getGeminiResponse","inputPrompt","post","prompt","headers","data","handleSubmit","resumeText","apiResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","target","placeholder","rows","type","accept","files","onClick","role","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/Pc/OneDrive/Desktop/careeredge/src/Components/ATS.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { PDFDocument } from 'pdf-lib';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Add Bootstrap CSS for styling\r\n\r\nexport default function ATS() {\r\n  const [jobDescription, setJobDescription] = useState('');\r\n  const [resumeFile, setResumeFile] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [response, setResponse] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Function to extract text from a PDF file\r\n  const extractPdfText = async (file) => {\r\n    try {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\r\n      const pages = pdfDoc.getPages();\r\n      let text = '';\r\n\r\n      for (const page of pages) {\r\n        text += await page.getTextContent();\r\n      }\r\n\r\n      return text;\r\n    } catch (err) {\r\n      console.error('Error extracting text from PDF:', err);\r\n      setError('Failed to extract text from the PDF.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Function to get response from Google API\r\n  const getGeminiResponse = async (inputPrompt) => {\r\n    try {\r\n      const response = await axios.post('https://generativeai.googleapis.com/v1/models/gemini-pro:generateText', {\r\n        prompt: {\r\n          text: inputPrompt\r\n        }\r\n      }, {\r\n        headers: {\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching response from Google API:', err);\r\n      setError('Failed to get response from the API.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Function to handle form submission\r\n  const handleSubmit = async () => {\r\n    if (!resumeFile || !jobDescription || !apiKey) {\r\n      setError('Please upload a resume, enter a job description, and provide an API key.');\r\n      return;\r\n    }\r\n\r\n    setError(null);\r\n    setResponse(null);\r\n\r\n    // Extract text from the uploaded resume PDF\r\n    const resumeText = await extractPdfText(resumeFile);\r\n\r\n    if (!resumeText) {\r\n      return;\r\n    }\r\n\r\n    // Prepare the input prompt for the Google API\r\n    const inputPrompt = `\r\n      Hey Act Like a skilled or very experienced ATS (Application Tracking System)\r\n      with a deep understanding of the tech field, software engineering, data science, data analyst,\r\n      and big data engineering. Your task is to evaluate the resume based on the given job description.\r\n      You must consider the job market is very competitive and you should provide the \r\n      best assistance for improving the resumes. Assign the percentage Matching based \r\n      on JD and the missing keywords with high accuracy.\r\n      resume:${resumeText}\r\n      description:${jobDescription}\r\n\r\n      I want the response in one single string having the structure\r\n      {\"JD Match\":\"%\",\"MissingKeywords\":[],\"Profile Summary\":\"\"}\r\n    `;\r\n\r\n    // Fetch the response from the Google API\r\n    const apiResponse = await getGeminiResponse(inputPrompt);\r\n\r\n    if (apiResponse) {\r\n      setResponse(apiResponse);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-5\">\r\n      <div className=\"card shadow p-4\">\r\n        <h2 className=\"text-center mb-4\">Resume Matcher ATS</h2>\r\n\r\n        <div className=\"form-group mb-4\">\r\n          <label htmlFor=\"jobDescription\">Job Description:</label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"jobDescription\"\r\n            value={jobDescription}\r\n            onChange={(e) => setJobDescription(e.target.value)}\r\n            placeholder=\"Paste the Job Description here\"\r\n            rows=\"6\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group mb-4\">\r\n          <label htmlFor=\"resumeFile\">Upload Your Resume (PDF):</label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"file\"\r\n            accept=\"application/pdf\"\r\n            onChange={(e) => setResumeFile(e.target.files[0])}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group mb-4\">\r\n          <label htmlFor=\"apiKey\">Google API Key:</label>\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"password\"\r\n            value={apiKey}\r\n            onChange={(e) => setApiKey(e.target.value)}\r\n            placeholder=\"Enter your Google API Key\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"text-center\">\r\n          <button className=\"btn btn-primary btn-lg\" onClick={handleSubmit}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n\r\n        {error && (\r\n          <div className=\"alert alert-danger mt-4\" role=\"alert\">\r\n            {error}\r\n          </div>\r\n        )}\r\n\r\n        {response && (\r\n          <div className=\"response mt-4\">\r\n            <h3 className=\"text-center\">Response:</h3>\r\n            <pre className=\"bg-light p-3 rounded\">{JSON.stringify(response, null, 2)}</pre>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}