{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pc\\\\OneDrive\\\\Desktop\\\\careeredge\\\\src\\\\Components\\\\ATS.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Tesseract from 'tesseract.js';\nimport { PDFDocument } from 'pdf-lib';\nimport { createCanvas } from 'canvas';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ATS() {\n  _s();\n  const [jobDescription, setJobDescription] = useState('');\n  const [resumeFile, setResumeFile] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Function to convert PDF pages to images and extract text using Tesseract\n  const extractTextFromPDF = async file => {\n    try {\n      const pdfDoc = await PDFDocument.load(await file.arrayBuffer());\n      const numPages = pdfDoc.getPageCount();\n      const texts = [];\n      for (let i = 0; i < numPages; i++) {\n        const page = pdfDoc.getPage(i);\n        const {\n          width,\n          height\n        } = page.getSize();\n        const canvas = createCanvas(width, height);\n        const context = canvas.getContext('2d');\n        const imageData = await page.render({\n          canvasContext: context,\n          viewport: page.getViewport({\n            scale: 1\n          })\n        }).promise;\n        const imgDataUrl = canvas.toDataURL('image/png');\n        const {\n          data: {\n            text\n          }\n        } = await Tesseract.recognize(imgDataUrl, 'eng');\n        texts.push(text);\n      }\n      return texts.join('\\n');\n    } catch (err) {\n      console.error('Error extracting text from PDF:', err);\n      setError('Failed to extract text from the PDF.');\n      return null;\n    }\n  };\n\n  // Function to get response from Google API\n  const getGeminiResponse = async inputPrompt => {\n    try {\n      const response = await axios.post('https://generativeai.googleapis.com/v1/models/gemini-pro:generateText', {\n        prompt: {\n          text: inputPrompt\n        }\n      }, {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching response from Google API:', err);\n      setError('Failed to get response from the API.');\n      return null;\n    }\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async () => {\n    if (!resumeFile || !jobDescription || !apiKey) {\n      setError('Please upload a resume, enter a job description, and provide an API key.');\n      return;\n    }\n    setError(null);\n    setResponse(null);\n\n    // Extract text from the uploaded resume PDF using OCR\n    const resumeText = await extractTextFromPDF(resumeFile);\n    if (!resumeText) {\n      return;\n    }\n\n    // Prepare the input prompt for the Google API\n    const inputPrompt = `\n      Hey Act Like a skilled or very experienced ATS (Application Tracking System)\n      with a deep understanding of the tech field, software engineering, data science, data analyst,\n      and big data engineering. Your task is to evaluate the resume based on the given job description.\n      You must consider the job market is very competitive and you should provide the \n      best assistance for improving the resumes. Assign the percentage Matching based \n      on JD and the missing keywords with high accuracy.\n      resume:${resumeText}\n      description:${jobDescription}\n\n      I want the response in one single string having the structure\n      {\"JD Match\":\"%\",\"MissingKeywords\":[],\"Profile Summary\":\"\"}\n    `;\n\n    // Fetch the response from the Google API\n    const apiResponse = await getGeminiResponse(inputPrompt);\n    if (apiResponse) {\n      setResponse(apiResponse);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"resume-matcher\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Resume Matcher ATS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"jobDescription\",\n      children: \"Job Description:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"jobDescription\",\n      value: jobDescription,\n      onChange: e => setJobDescription(e.target.value),\n      placeholder: \"Paste the Job Description here\",\n      rows: \"6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"resumeFile\",\n      children: \"Upload Your Resume (PDF):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"application/pdf\",\n      onChange: e => setResumeFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"apiKey\",\n      children: \"Google API Key:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      value: apiKey,\n      onChange: e => setApiKey(e.target.value),\n      placeholder: \"Enter your Google API Key\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"response\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(response, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(ATS, \"schg/+LrZ9KyAN1NfEhju4rW04E=\");\n_c = ATS;\nvar _c;\n$RefreshReg$(_c, \"ATS\");","map":{"version":3,"names":["React","useState","Tesseract","PDFDocument","createCanvas","axios","jsxDEV","_jsxDEV","ATS","_s","jobDescription","setJobDescription","resumeFile","setResumeFile","apiKey","setApiKey","response","setResponse","error","setError","extractTextFromPDF","file","pdfDoc","load","arrayBuffer","numPages","getPageCount","texts","i","page","getPage","width","height","getSize","canvas","context","getContext","imageData","render","canvasContext","viewport","getViewport","scale","promise","imgDataUrl","toDataURL","data","text","recognize","push","join","err","console","getGeminiResponse","inputPrompt","post","prompt","headers","handleSubmit","resumeText","apiResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","target","placeholder","rows","type","accept","files","onClick","style","color","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/Pc/OneDrive/Desktop/careeredge/src/Components/ATS.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Tesseract from 'tesseract.js';\r\nimport { PDFDocument } from 'pdf-lib';\r\nimport { createCanvas } from 'canvas';\r\nimport axios from 'axios';\r\nexport default function ATS() {\r\n  const [jobDescription, setJobDescription] = useState('');\r\n  const [resumeFile, setResumeFile] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [response, setResponse] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Function to convert PDF pages to images and extract text using Tesseract\r\n  const extractTextFromPDF = async (file) => {\r\n    try {\r\n      const pdfDoc = await PDFDocument.load(await file.arrayBuffer());\r\n      const numPages = pdfDoc.getPageCount();\r\n      const texts = [];\r\n\r\n      for (let i = 0; i < numPages; i++) {\r\n        const page = pdfDoc.getPage(i);\r\n        const { width, height } = page.getSize();\r\n        const canvas = createCanvas(width, height);\r\n        const context = canvas.getContext('2d');\r\n\r\n        const imageData = await page.render({ canvasContext: context, viewport: page.getViewport({ scale: 1 }) }).promise;\r\n        const imgDataUrl = canvas.toDataURL('image/png');\r\n\r\n        const { data: { text } } = await Tesseract.recognize(imgDataUrl, 'eng');\r\n        texts.push(text);\r\n      }\r\n\r\n      return texts.join('\\n');\r\n    } catch (err) {\r\n      console.error('Error extracting text from PDF:', err);\r\n      setError('Failed to extract text from the PDF.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Function to get response from Google API\r\n  const getGeminiResponse = async (inputPrompt) => {\r\n    try {\r\n      const response = await axios.post('https://generativeai.googleapis.com/v1/models/gemini-pro:generateText', {\r\n        prompt: {\r\n          text: inputPrompt\r\n        }\r\n      }, {\r\n        headers: {\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching response from Google API:', err);\r\n      setError('Failed to get response from the API.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Function to handle form submission\r\n  const handleSubmit = async () => {\r\n    if (!resumeFile || !jobDescription || !apiKey) {\r\n      setError('Please upload a resume, enter a job description, and provide an API key.');\r\n      return;\r\n    }\r\n\r\n    setError(null);\r\n    setResponse(null);\r\n\r\n    // Extract text from the uploaded resume PDF using OCR\r\n    const resumeText = await extractTextFromPDF(resumeFile);\r\n\r\n    if (!resumeText) {\r\n      return;\r\n    }\r\n\r\n    // Prepare the input prompt for the Google API\r\n    const inputPrompt = `\r\n      Hey Act Like a skilled or very experienced ATS (Application Tracking System)\r\n      with a deep understanding of the tech field, software engineering, data science, data analyst,\r\n      and big data engineering. Your task is to evaluate the resume based on the given job description.\r\n      You must consider the job market is very competitive and you should provide the \r\n      best assistance for improving the resumes. Assign the percentage Matching based \r\n      on JD and the missing keywords with high accuracy.\r\n      resume:${resumeText}\r\n      description:${jobDescription}\r\n\r\n      I want the response in one single string having the structure\r\n      {\"JD Match\":\"%\",\"MissingKeywords\":[],\"Profile Summary\":\"\"}\r\n    `;\r\n\r\n    // Fetch the response from the Google API\r\n    const apiResponse = await getGeminiResponse(inputPrompt);\r\n\r\n    if (apiResponse) {\r\n      setResponse(apiResponse);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"resume-matcher\">\r\n      <h2>Resume Matcher ATS</h2>\r\n\r\n      <label htmlFor=\"jobDescription\">Job Description:</label>\r\n      <textarea\r\n        id=\"jobDescription\"\r\n        value={jobDescription}\r\n        onChange={(e) => setJobDescription(e.target.value)}\r\n        placeholder=\"Paste the Job Description here\"\r\n        rows=\"6\"\r\n      />\r\n\r\n      <label htmlFor=\"resumeFile\">Upload Your Resume (PDF):</label>\r\n      <input\r\n        type=\"file\"\r\n        accept=\"application/pdf\"\r\n        onChange={(e) => setResumeFile(e.target.files[0])}\r\n      />\r\n\r\n      <label htmlFor=\"apiKey\">Google API Key:</label>\r\n      <input\r\n        type=\"password\"\r\n        value={apiKey}\r\n        onChange={(e) => setApiKey(e.target.value)}\r\n        placeholder=\"Enter your Google API Key\"\r\n      />\r\n\r\n      <button onClick={handleSubmit}>Submit</button>\r\n\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n      {response && (\r\n        <div className=\"response\">\r\n          <h3>Response:</h3>\r\n          <pre>{JSON.stringify(response, null, 2)}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}