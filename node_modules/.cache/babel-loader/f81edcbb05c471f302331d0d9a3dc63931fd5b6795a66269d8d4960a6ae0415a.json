{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pc\\\\OneDrive\\\\Desktop\\\\careeredge\\\\src\\\\Components\\\\ATS.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { GlobalWorkerOptions, getDocument } from 'pdfjs-dist';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Set the workerSrc property to a CDN URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.worker.min.js';\nexport default function ATS() {\n  _s();\n  const [jobDescription, setJobDescription] = useState('');\n  const [resumeFile, setResumeFile] = useState(null);\n  const [apiKey, setApiKey] = useState('');\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const extractPdfText = async file => {\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await getDocument(arrayBuffer).promise;\n      let text = '';\n      for (let i = 1; i <= pdf.numPages; i++) {\n        const page = await pdf.getPage(i);\n        const content = await page.getTextContent();\n        text += content.items.map(item => item.str).join(' ') + '\\n';\n      }\n      return text;\n    } catch (err) {\n      console.error('Error extracting text from PDF:', err);\n      setError('Failed to extract text from the PDF.');\n      return null;\n    }\n  };\n  const getGeminiResponse = async inputPrompt => {\n    try {\n      const response = await axios.post('https://generativeai.googleapis.com/v1/models/gemini-pro:generateText', {\n        prompt: {\n          text: inputPrompt\n        }\n      }, {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (err) {\n      console.error('Error fetching response from Google API:', err);\n      setError('Failed to get response from the API.');\n      return null;\n    }\n  };\n  const handleSubmit = async () => {\n    if (!resumeFile || !jobDescription || !apiKey) {\n      setError('Please upload a resume, enter a job description, and provide an API key.');\n      return;\n    }\n    setError(null);\n    setResponse(null);\n    const resumeText = await extractPdfText(resumeFile);\n    if (!resumeText) {\n      return;\n    }\n    const inputPrompt = `...`; // Your existing prompt setup\n\n    const apiResponse = await getGeminiResponse(inputPrompt);\n    if (apiResponse) {\n      setResponse(apiResponse);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4\",\n        children: \"Resume Matcher ATS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"jobDescription\",\n        children: \"Job Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"jobDescription\",\n        value: jobDescription,\n        onChange: e => setJobDescription(e.target.value),\n        placeholder: \"Paste the Job Description here\",\n        rows: \"6\",\n        className: \"form-control\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"resumeFile\",\n        children: \"Upload Your Resume (PDF):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: e => setResumeFile(e.target.files[0]),\n        className: \"form-control\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"apiKey\",\n        children: \"Google API Key:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: apiKey,\n        onChange: e => setApiKey(e.target.value),\n        placeholder: \"Enter your Google API Key\",\n        className: \"form-control\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"btn btn-primary mt-3\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 19\n      }, this), response && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Response:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(response, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(ATS, \"schg/+LrZ9KyAN1NfEhju4rW04E=\");\n_c = ATS;\nvar _c;\n$RefreshReg$(_c, \"ATS\");","map":{"version":3,"names":["React","useState","axios","GlobalWorkerOptions","getDocument","jsxDEV","_jsxDEV","workerSrc","ATS","_s","jobDescription","setJobDescription","resumeFile","setResumeFile","apiKey","setApiKey","response","setResponse","error","setError","extractPdfText","file","arrayBuffer","pdf","promise","text","i","numPages","page","getPage","content","getTextContent","items","map","item","str","join","err","console","getGeminiResponse","inputPrompt","post","prompt","headers","data","handleSubmit","resumeText","apiResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","value","onChange","e","target","placeholder","rows","type","accept","files","onClick","style","color","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/Pc/OneDrive/Desktop/careeredge/src/Components/ATS.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { GlobalWorkerOptions, getDocument } from 'pdfjs-dist';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// Set the workerSrc property to a CDN URL\r\nGlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.worker.min.js';\r\n\r\nexport default function ATS() {\r\n  const [jobDescription, setJobDescription] = useState('');\r\n  const [resumeFile, setResumeFile] = useState(null);\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [response, setResponse] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const extractPdfText = async (file) => {\r\n    try {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      const pdf = await getDocument(arrayBuffer).promise;\r\n      let text = '';\r\n\r\n      for (let i = 1; i <= pdf.numPages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const content = await page.getTextContent();\r\n        text += content.items.map(item => item.str).join(' ') + '\\n';\r\n      }\r\n\r\n      return text;\r\n    } catch (err) {\r\n      console.error('Error extracting text from PDF:', err);\r\n      setError('Failed to extract text from the PDF.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getGeminiResponse = async (inputPrompt) => {\r\n    try {\r\n      const response = await axios.post('https://generativeai.googleapis.com/v1/models/gemini-pro:generateText', {\r\n        prompt: {\r\n          text: inputPrompt\r\n        }\r\n      }, {\r\n        headers: {\r\n          'Authorization': `Bearer ${apiKey}`,\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error fetching response from Google API:', err);\r\n      setError('Failed to get response from the API.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!resumeFile || !jobDescription || !apiKey) {\r\n      setError('Please upload a resume, enter a job description, and provide an API key.');\r\n      return;\r\n    }\r\n\r\n    setError(null);\r\n    setResponse(null);\r\n\r\n    const resumeText = await extractPdfText(resumeFile);\r\n\r\n    if (!resumeText) {\r\n      return;\r\n    }\r\n\r\n    const inputPrompt = `...`; // Your existing prompt setup\r\n\r\n    const apiResponse = await getGeminiResponse(inputPrompt);\r\n\r\n    if (apiResponse) {\r\n      setResponse(apiResponse);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-5\">\r\n      <div className=\"card shadow p-4\">\r\n        <h2 className=\"text-center mb-4\">Resume Matcher ATS</h2>\r\n        <label htmlFor=\"jobDescription\">Job Description:</label>\r\n        <textarea\r\n          id=\"jobDescription\"\r\n          value={jobDescription}\r\n          onChange={(e) => setJobDescription(e.target.value)}\r\n          placeholder=\"Paste the Job Description here\"\r\n          rows=\"6\"\r\n          className=\"form-control\"\r\n        />\r\n\r\n        <label htmlFor=\"resumeFile\">Upload Your Resume (PDF):</label>\r\n        <input\r\n          type=\"file\"\r\n          accept=\"application/pdf\"\r\n          onChange={(e) => setResumeFile(e.target.files[0])}\r\n          className=\"form-control\"\r\n        />\r\n\r\n        <label htmlFor=\"apiKey\">Google API Key:</label>\r\n        <input\r\n          type=\"password\"\r\n          value={apiKey}\r\n          onChange={(e) => setApiKey(e.target.value)}\r\n          placeholder=\"Enter your Google API Key\"\r\n          className=\"form-control\"\r\n        />\r\n\r\n        <button onClick={handleSubmit} className=\"btn btn-primary mt-3\">Submit</button>\r\n\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n        {response && (\r\n          <div className=\"response mt-3\">\r\n            <h3>Response:</h3>\r\n            <pre>{JSON.stringify(response, null, 2)}</pre>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}